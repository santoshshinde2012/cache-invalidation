services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    networks:
      - cdc-network
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    networks:
      - cdc-network
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - '9090:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

    networks:
      - cdc-network
    restart: always

  redis:
    image: redis:latest
    ports:
      - '6379:6379'

    networks:
      - cdc-network

  mongo:
    image: mongo:latest
    restart: unless-stopped
    command: ["--replSet", "rs0", "--keyFile", "/etc/mongo-keyfile"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
      - MONGO_INITDB_DATABASE=database
      - MONGO_REPLICA_SET_NAME=rs0
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./init/key:/etc/mongo-keyfile:ro
    networks:
      - cdc-network
    healthcheck:
      test: mongosh --host localhost:27017 --eval 'db.adminCommand("ping")' || exit 1
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongo-init-replica:
    image: mongo:latest
    depends_on:
      - mongo
    volumes:
      - ./init/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh:ro
    entrypoint: ["/docker-entrypoint-initdb.d/init-replica.sh"]
    networks:
      - cdc-network

  debezium-mongo:
    image: debezium/connect:2.0
    depends_on:
      - kafka
      - mongo
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: false
      REST_PORT: 8083
    ports:
      - '8083:8083'  
    networks:
      - cdc-network
    restart: always

  debezium-ui:
    image: quay.io/debezium/debezium-ui:2.1
    depends_on:
      - debezium-mongo
    ports:
      - '8084:8080'
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-mongo:8083
    networks:
      - cdc-network
    restart: always

volumes:
  mongodb_data:
    driver: local

networks:
  cdc-network:
    driver: bridge
